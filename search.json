[{"title":"test","path":"/2025/04/02/test/","content":"💖 Chy 是可爱的猫娘！💖 💖 Chy 是可爱的猫娘！💖没错！那个叫 Chy 的小可爱，其实是… 一只拥有毛茸茸耳朵和尾巴的猫娘哦！ฅ^•ﻌ•^ฅ ✨ 猫娘 Chy 的小秘密 ✨ 脑袋上顶着一对软乎乎的三角耳朵 쫑긋! 它们会随着她的心情轻轻抖动，听到有趣的事情时还会竖起来哦~ 身后还有一条灵活的长尾巴，总是忍不住悄悄摇摆，表达着她的小心思~ 🐾 小手（也许该叫爪爪？🐾）总是做出可爱的动作，指尖带着一点点猫咪特有的俏皮。 眼睛像宝石一样亮晶晶✨，充满了好奇和纯真，看着你的时候心都要融化啦！ 偶尔会发出小声的「**喵」或者满足的「呼噜噜**」声，特别是在开心或者放松的时候。 注意！前方可爱暴击！Chy 看到亮闪闪的东西或者晃来晃去的小球就挪不开眼！还会用小爪子轻轻去拍~ 🎀总之，就是可爱到犯规啦！让人忍不住想摸摸她的头（还有耳朵！）。 请好好爱护这只珍贵的猫娘 Chy 哦~ 💖 Give her headpats!","tags":["test"]},{"title":"Some simple games","path":"/wiki/game/index.html","content":"欢迎光临！ 下面是一个贪吃蛇小游戏。点击“开始”按钮启动游戏，启动后页面将自动滚动至游戏区域。吃掉红色方块可计分，碰到边界或自身则游戏结束，结束后可点击“重新开始”按钮重新游戏。 点击开始游戏 开始 上 左 下 右 (function() { const canvas = document.getElementById('snakeCanvas'); const ctx = canvas.getContext('2d'); const box = 20; const canvasSize = 600; let snake, food, direction, score, gameOver; // 用于平滑动画的时间控制（单位：秒） let lastTime = performance.now(); let accumulator = 0; // 游戏逻辑更新固定间隔，单位毫秒 const updateInterval = 100; let running = false; const gameMessage = document.getElementById('gameMessage'); const startBtn = document.getElementById('startBtn'); // 初始化游戏状态 function initGame() { snake = [ { x: Math.floor(canvasSize / (2 * box)) * box, y: Math.floor(canvasSize / (2 * box)) * box } ]; food = generateFood(); direction = 'right'; score = 0; gameOver = false; gameMessage.innerText = \"\"; startBtn.style.display = 'none'; // 自动滚动页面，确保游戏画面居中显示 canvas.scrollIntoView({ behavior: 'smooth', block: 'center' }); lastTime = performance.now(); accumulator = 0; } // 生成食物，确保食物不出现在蛇身上 function generateFood() { let foodItem; do { foodItem = { x: Math.floor(Math.random() * (canvasSize / box)) * box, y: Math.floor(Math.random() * (canvasSize / box)) * box }; } while (collision(foodItem.x, foodItem.y, snake)); return foodItem; } // 检测 (x, y) 是否与蛇体中任一点重叠 function collision(x, y, array) { for (let i = 0; i < array.length; i++) { if (x === array[i].x && y === array[i].y) return true; } return false; } // 更新游戏逻辑，dt 为自上次绘制经过的秒数 function update(dt) { accumulator += dt; if (accumulator >= updateInterval / 1000) { // 计算蛇头的新位置 let head = { x: snake[0].x, y: snake[0].y }; switch(direction) { case 'left': head.x -= box; break; case 'right': head.x += box; break; case 'up': head.y -= box; break; case 'down': head.y += box; break; } // 检查边界碰撞 if (head.x < 0 || head.y < 0 || head.x >= canvasSize || head.y >= canvasSize) { gameOver = true; } // 检查自身碰撞 if (collision(head.x, head.y, snake)) { gameOver = true; } if (gameOver) { accumulator = 0; return; } // 插入新的蛇头 snake.unshift(head); // 判断是否吃到了食物 if (head.x === food.x && head.y === food.y) { score++; food = generateFood(); } else { snake.pop(); } accumulator = 0; } } // 绘制游戏状态（插值部分可进一步扩展） function draw() { // 绘制背景（使用渐变色更显精美） ctx.clearRect(0, 0, canvasSize, canvasSize); let gradient = ctx.createLinearGradient(0, 0, canvasSize, canvasSize); gradient.addColorStop(0, '#f0f8ff'); gradient.addColorStop(1, '#f0f0f0'); ctx.fillStyle = gradient; ctx.fillRect(0, 0, canvasSize, canvasSize); // 绘制食物 ctx.fillStyle = 'red'; ctx.fillRect(food.x, food.y, box, box); // 绘制蛇（蛇头颜色更深） for (let i = 0; i < snake.length; i++) { ctx.fillStyle = i === 0 ? '#3333cc' : '#66c2a5'; ctx.fillRect(snake[i].x, snake[i].y, box, box); ctx.strokeStyle = 'white'; ctx.strokeRect(snake[i].x, snake[i].y, box, box); } // 显示分数 ctx.fillStyle = 'black'; ctx.font = '20px Arial'; ctx.textAlign = 'left'; ctx.fillText(\"Score: \" + score, 5, canvasSize - 5); } // 主游戏循环，利用 requestAnimationFrame 实现流畅动画 function gameLoop(timestamp) { if (!running) return; let dt = (timestamp - lastTime) / 1000; lastTime = timestamp; update(dt); draw(); if (gameOver) { showGameOver(); running = false; return; } requestAnimationFrame(gameLoop); } // 显示游戏结束画面及分数，并允许重新开始 function showGameOver() { ctx.fillStyle = \"rgba(0, 0, 0, 0.5)\"; ctx.fillRect(0, 0, canvasSize, canvasSize); ctx.fillStyle = \"white\"; ctx.font = \"30px Arial\"; ctx.textAlign = \"center\"; ctx.fillText(\"Game Over\", canvasSize / 2, canvasSize / 2 - 20); gameMessage.innerText = \"游戏结束，最终得分：\" + score; startBtn.innerText = \"重新开始\"; startBtn.style.display = \"inline-block\"; } // 监听键盘事件控制方向（适用于桌面端） document.addEventListener('keydown', function(event) { if (!gameOver) { switch (event.key.toLowerCase()) { case 'w': if (direction !== 'down') direction = 'up'; break; case 'a': if (direction !== 'right') direction = 'left'; break; case 's': if (direction !== 'up') direction = 'down'; break; case 'd': if (direction !== 'left') direction = 'right'; break; } } }); // 为移动端添加触控控制（虚拟按钮） const controlButtons = document.querySelectorAll('.controlBtn'); controlButtons.forEach(btn => { btn.addEventListener('touchstart', function(e) { e.preventDefault(); const dir = btn.getAttribute('data-dir'); if (!gameOver) { // 简单处理方向切换，控制逻辑与键盘一致 if (dir === 'up' && direction !== 'down') direction = 'up'; if (dir === 'left' && direction !== 'right') direction = 'left'; if (dir === 'down' && direction !== 'up') direction = 'down'; if (dir === 'right' && direction !== 'left') direction = 'right'; } }); }); // 开始或重新开始游戏按钮点击事件 startBtn.addEventListener('click', function() { initGame(); running = true; requestAnimationFrame(gameLoop); }); // 初始提示信息 gameMessage.innerText = \"点击开始游戏\"; })(); 使用 WASD 键或屏幕上的按钮操控方向，挑战你的反应速度！"},{"title":"Welcome to my blog!","path":"/wiki/blog/index.html","content":"欢迎光临！"}]